import streamlit as st
import pdfplumber
import pandas as pd
import re
import requests
from datetime import datetime, date
from typing import Dict, List, Optional, Tuple
import base64
import pytz
from dateutil.relativedelta import relativedelta
from io import BytesIO
import time

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Corre√ß√£o Monet√°ria Completa", layout="wide")

# T√≠tulo do aplicativo
st.title("üìà Corre√ß√£o Monet√°ria Completa")

# Importa√ß√µes do m√≥dulo de √≠ndices
from utils.indices import (
    get_indices_disponiveis,
    calcular_correcao_individual,
    calcular_correcao_media,
    formatar_moeda,
    limpar_cache
)

# ===== Classes para modelagem dos dados =====
class Cliente:
    def __init__(self, codigo: str = "", nome: str = ""):
        self.codigo = codigo
        self.nome = nome

class Venda:
    def __init__(self, numero: str = "", data: str = "", valor: float = 0.0):
        self.numero = numero
        self.data = data
        self.valor = valor

class Parcela:
    def __init__(self, codigo: str = "", data_vencimento: str = "", valor_original: float = 0.0,
                 data_recebimento: Optional[str] = None, valor_pago: float = 0.0):
        self.codigo = codigo
        self.data_vencimento = data_vencimento
        self.valor_original = valor_original
        self.data_recebimento = data_recebimento
        self.valor_pago = valor_pago
    
    def to_dict(self):
        return {
            "Parcela": self.codigo,
            "Dt Vencim": self.data_vencimento,
            "Valor Original": self.valor_original,
            "Dt Receb": self.data_recebimento if self.data_recebimento else "",
            "Valor Pago": self.valor_pago
        }

# ===== Fun√ß√µes de utilidade =====
def parse_date(date_str: str) -> Optional[date]:
    try:
        return datetime.strptime(date_str, "%d/%m/%Y").date()
    except:
        return None

def parse_monetary(value: str) -> float:
    if not value or value.strip() == "":
        return 0.0
    try:
        return float(value.replace('.', '').replace(',', '.'))
    except:
        return 0.0

# ===== Componentes =====
def FileUploader() -> Optional[bytes]:
    return st.file_uploader("Carregue seu arquivo PDF", type="pdf")

def InfoBox(title: str, value: str, color: str = "blue"):
    colors = {
        "blue": ("#1E88E5", "#E3F2FD"),
        "green": ("#43A047", "#E8F5E9"),
        "yellow": ("#FFB300", "#FFF8E1")
    }
    bg_color = colors.get(color, colors["blue"])[1]
    text_color = colors.get(color, colors["blue"])[0]
    
    st.markdown(
        f"""
        <div style="background-color: {bg_color}; padding: 1rem; border-radius: 0.5rem; margin-bottom: 1rem;">
            <h3 style="color: {text_color}; margin: 0 0 0.5rem 0;">{title}</h3>
            <p style="font-size: 1.5rem; font-weight: bold; color: {text_color}; margin: 0;">{value}</p>
        </div>
        """,
        unsafe_allow_html=True
    )

# ===== Processamento do PDF =====
class PDFProcessor:
    def __init__(self):
        self.cliente = Cliente()
        self.venda = Venda()
        self.parcelas: List[Parcela] = []
        self.total_recebido: float = 0.0
        self.total_original: float = 0.0

    def process_pdf(self, file: bytes) -> bool:
        try:
            with pdfplumber.open(file) as pdf:
                full_text = ""
                for page in pdf.pages:
                    full_text += page.extract_text() or ""
            
            self._extract_cliente(full_text)
            self._extract_venda(full_text)
            self._extract_parcelas(full_text)
            self._calculate_totais()
            return True
        except Exception as e:
            st.error(f"Erro ao processar o PDF: {str(e)}")
            return False

    def _extract_cliente(self, text: str):
        cliente_regex = r'Cliente\s*:\s*(\d+)\s*-\s*([^\n]+)'
        match = re.search(cliente_regex, text)
        if match:
            self.cliente = Cliente(codigo=match.group(1).strip(), nome=match.group(2).strip())
        else:
            st.warning("N√£o foi poss√≠vel extrair informa√ß√µes do cliente")

    def _extract_venda(self, text: str):
        venda_regex = r'Venda:\s*(\d+)\s+Dt\.?\s*Venda:\s*(\d{2}/\d{2}/\d{4})\s+Valor\s*da\s*venda:\s*([\d\.,]+)'
        match = re.search(venda_regex, text)
        if match:
            self.venda = Venda(
                numero=match.group(1).strip(),
                data=match.group(2).strip(),
                valor=parse_monetary(match.group(3))
            )
        else:
            st.warning("N√£o foi poss√≠vel extrair informa√ß√µes da venda")

    def _extract_parcelas(self, text: str):
        padrao_parcela = (
            r'([A-Z]?\.?\d+/\d+)\s+' 
            r'(\d{2}/\d{2}/\d{4})\s+' 
            r'(?:\d+\s+)?' 
            r'([\d\.,]+)\s+' 
            r'(?:\d{2}/\d{2}/\d{4}\s+)?' 
            r'([\d\.,]*)' 
        )
        
        matches = re.finditer(padrao_parcela, text)
        self.parcelas = []
        
        for match in matches:
            codigo = match.group(1).strip()
            if codigo.startswith('Total') or not any(c.isdigit() for c in codigo):
                continue
                
            data_vencimento = match.group(2).strip()
            valor_original = parse_monetary(match.group(3))
            
            valor_pago_str = match.group(4) if match.group(4) else "0,00"
            valor_pago = parse_monetary(valor_pago_str)
            
            data_pagamento = None
            pagamento_match = re.search(
                r'{}\s+{}\s+(?:\d+\s+)?[\d\.,]+\s+(\d{{2}}/\d{{2}}/\d{{4}})'.format(
                    re.escape(codigo), re.escape(data_vencimento)
                ), text
            )
            if pagamento_match:
                data_pagamento = pagamento_match.group(1)
            
            parcela = Parcela(
                codigo=codigo,
                data_vencimento=data_vencimento,
                valor_original=valor_original,
                data_recebimento=data_pagamento,
                valor_pago=valor_pago
            )
            self.parcelas.append(parcela)
            
        if not self.parcelas:
            st.warning("Nenhuma parcela foi identificada no documento")

        total_recebido_match = re.search(
            r'RECEBIDO\s*:\s*([\d\.,]+)\s+([\d\.,]+)',
            text
        )
        if total_recebido_match:
            self.total_recebido = parse_monetary(total_recebido_match.group(2))
        
        self.total_original = sum(p.valor_original for p in self.parcelas)

    def _calculate_totais(self):
        self.total_recebido = sum(p.valor_pago for p in self.parcelas)
        self.total_original = sum(p.valor_original for p in self.parcelas)

# ===== Interface do Usu√°rio =====
def render_sidebar():
    """Renderiza a barra lateral com configura√ß√µes"""
    st.sidebar.header("Configura√ß√µes de Corre√ß√£o")
    
    # Bot√£o para limpar cache
    if st.sidebar.button("üóëÔ∏è Limpar Cache", help="Limpa dados em cache para for√ßar atualiza√ß√£o"):
        limpar_cache()
        st.rerun()
    
    # Verificar √≠ndices dispon√≠veis
    with st.sidebar.expander("üìä Status dos √çndices", expanded=True):
        indices_disponiveis = get_indices_disponiveis()
    
    if not indices_disponiveis:
        st.sidebar.warning("""
        ‚ö†Ô∏è **Modo de Conting√™ncia Ativo**
        
        O sistema est√° enfrentando dificuldades para acessar as APIs oficiais.
        """)
        indices_disponiveis = {
            'IPCA': {'nome': 'IPCA - Tentando fontes alternativas', 'disponivel': False},
            'IGPM': {'nome': 'IGP-M - Tentando fontes alternativas', 'disponivel': False},
            'INPC': {'nome': 'INPC - Tentando fontes alternativas', 'disponivel': False}
        }
    
    # Modo de opera√ß√£o
    modo = st.sidebar.radio(
        "Modo de Opera√ß√£o",
        options=["Corrigir Valores do PDF", "Corrigir Valor Manual"],
        index=0
    )
    
    # Sele√ß√£o do m√©todo de corre√ß√£o
    metodo_correcao = st.sidebar.radio(
        "M√©todo de Corre√ß√£o",
        options=["√çndice √önico", "M√©dia de √çndices"],
        index=0
    )
    
    if metodo_correcao == "√çndice √önico":
        indice_selecionado = st.sidebar.selectbox(
            "Selecione o √≠ndice econ√¥mico",
            options=list(indices_disponiveis.keys()),
            index=0
        )
        indices_para_calculo = [indice_selecionado]
    else:
        # CORRE√á√ÉO: Usar session_state para manter a sele√ß√£o de √≠ndices
        if 'indices_selecionados' not in st.session_state:
            st.session_state.indices_selecionados = list(indices_disponiveis.keys())
        
        indices_selecionados = st.sidebar.multiselect(
            "Selecione os √≠ndices para c√°lculo da m√©dia",
            options=list(indices_disponiveis.keys()),
            default=st.session_state.indices_selecionados,
            key="multiselect_indices"
        )
        
        # Atualizar session_state apenas quando houver mudan√ßa
        if indices_selecionados != st.session_state.indices_selecionados:
            st.session_state.indices_selecionados = indices_selecionados
        
        indices_para_calculo = st.session_state.indices_selecionados
        
        if len(indices_para_calculo) < 2:
            st.sidebar.warning("Selecione pelo menos 2 √≠ndices para calcular a m√©dia.")
            # Garantir que sempre tenha pelo menos 2 √≠ndices selecionados
            if len(indices_para_calculo) == 0 and len(indices_disponiveis) >= 2:
                indices_para_calculo = list(indices_disponiveis.keys())[:2]
                st.session_state.indices_selecionados = indices_para_calculo
    
    # Data de refer√™ncia para corre√ß√£o
    data_referencia = st.sidebar.date_input(
        "Data de refer√™ncia para corre√ß√£o",
        value=datetime.now(pytz.timezone('America/Sao_Paulo')).date(),
        format="DD/MM/YYYY"
    )
    
    return {
        "modo": modo,
        "metodo_correcao": metodo_correcao,
        "indices_para_calculo": indices_para_calculo,
        "data_referencia": data_referencia
    }

def render_correcao_manual(config: Dict):
    """Renderiza a corre√ß√£o manual com capacidade de adicionar/remover parcelas"""
    st.subheader("Corre√ß√£o Monet√°ria Manual")
    
    if "valores_manuais" not in st.session_state:
        st.session_state.valores_manuais = []
    
    with st.expander("Adicionar Novo Valor para Corre√ß√£o", expanded=True):
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            novo_valor = st.number_input(
                "Valor (R$)",
                min_value=0.0,
                value=1000.0,
                step=100.0,
                key="novo_valor"
            )
        with col2:
            nova_data = st.date_input(
                "Data do valor",
                value=date(2023, 1, 1),
                format="DD/MM/YYYY",
                key="nova_data"
            )
        with col3:
            st.write("")
            st.write("")
            if st.button("‚ûï Adicionar", key="btn_adicionar_valor"):
                st.session_state.valores_manuais.append({
                    "valor": novo_valor,
                    "data": nova_data,
                    "id": str(len(st.session_state.valores_manuais))
                })
                st.rerun()
    
    if st.session_state.valores_manuais:
        st.subheader("Valores para Corre√ß√£o")
        
        cols = st.columns([3, 2, 2, 1])
        with cols[0]:
            st.markdown("**Valor (R$)**")
        with cols[1]:
            st.markdown("**Data**")
        with cols[2]:
            st.markdown("**A√ß√µes**")
        
        # CORRE√á√ÉO: Usar formul√°rio para evitar rerun desnecess√°rio
        with st.form(key="form_remover_valores"):
            to_remove = []
            
            for i, item in enumerate(st.session_state.valores_manuais):
                cols = st.columns([3, 2, 2, 1])
                
                with cols[0]:
                    st.markdown(f"R$ {item['valor']:,.2f}")
                
                with cols[1]:
                    st.markdown(item['data'].strftime("%d/%m/%Y"))
                
                with cols[2]:
                    # Usar checkbox em vez de bot√£o para remo√ß√£o
                    if st.checkbox(f"Remover", key=f"remove_{item['id']}"):
                        to_remove.append(i)
            
            # Bot√£o de submit √∫nico para todas as remo√ß√µes
            if st.form_submit_button("‚úÖ Confirmar Remo√ß√µes", type="primary"):
                if to_remove:
                    for i in sorted(to_remove, reverse=True):
                        if 0 <= i < len(st.session_state.valores_manuais):
                            st.session_state.valores_manuais.pop(i)
                    st.success(f"{len(to_remove)} valor(es) removido(s)!")
                    st.rerun()
        
        # CORRE√á√ÉO: Separar o bot√£o de c√°lculo do formul√°rio de remo√ß√£o
        if st.button("üéØ Calcular Corre√ß√£o para Todos", type="primary", key="btn_calcular_todos"):
            with st.spinner("Calculando corre√ß√µes..."):
                resultados = []
                
                for item in st.session_state.valores_manuais:
                    valor = item["valor"]
                    data_valor = item["data"]
                    
                    if data_valor > config["data_referencia"]:
                        st.warning(f"Data de refer√™ncia deve ser posterior √† data do valor {valor} (data: {data_valor.strftime('%d/%m/%Y')})")
                        continue
                    
                    try:
                        if config["metodo_correcao"] == "√çndice √önico":
                            correcao = calcular_correcao_individual(
                                valor,
                                data_valor,
                                config["data_referencia"],
                                config["indices_para_calculo"][0]
                            )
                        else:
                            correcao = calcular_correcao_media(
                                valor,
                                data_valor,
                                config["data_referencia"],
                                config["indices_para_calculo"]
                            )
                        
                        if correcao['sucesso']:
                            resultados.append({
                                "Valor Original": valor,
                                "Data Original": data_valor.strftime("%d/%m/%Y"),
                                "Valor Corrigido": correcao["valor_corrigido"],
                                "√çndice(s)": ', '.join(correcao.get('indices', config['indices_para_calculo'])),
                                "Fator de Corre√ß√£o": correcao["fator_correcao"],
                                "Varia√ß√£o (%)": correcao["variacao_percentual"]
                            })
                        else:
                            st.warning(f"Erro ao corrigir valor R$ {valor:,.2f}: {correcao['mensagem']}")
                    except Exception as e:
                        st.error(f"Erro ao processar valor R$ {valor:,.2f}: {str(e)}")
                
                if resultados:
                    df_resultados = pd.DataFrame(resultados)
                    
                    st.subheader("üìä Resultados da Corre√ß√£o")
                    st.dataframe(df_resultados.style.format({
                        "Valor Original": "R$ {:.2f}",
                        "Valor Corrigido": "R$ {:.2f}",
                        "Fator de Corre√ß√£o": "{:.6f}",
                        "Varia√ß√£o (%)": "{:.2f}%"
                    }))
                    
                    # Estat√≠sticas resumidas
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric(
                            "Total Original", 
                            formatar_moeda(df_resultados["Valor Original"].sum())
                        )
                    with col2:
                        st.metric(
                            "Total Corrigido", 
                            formatar_moeda(df_resultados["Valor Corrigido"].sum())
                        )
                    with col3:
                        variacao_total = ((df_resultados["Valor Corrigido"].sum() - df_resultados["Valor Original"].sum()) / df_resultados["Valor Original"].sum()) * 100
                        st.metric(
                            "Varia√ß√£o Total", 
                            f"{variacao_total:+.2f}%"
                        )
                    
                    st.subheader("üíæ Exportar Resultados")
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        csv = df_resultados.to_csv(index=False, sep=';', decimal=',')
                        b64_csv = base64.b64encode(csv.encode()).decode()
                        href_csv = f'<a href="data:file/csv;base64,{b64_csv}" download="correcao_manual.csv" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; border-radius: 5px;">üì• Baixar CSV</a>'
                        st.markdown(href_csv, unsafe_allow_html=True)
                    
                    with col2:
                        output = BytesIO()
                        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                            df_resultados.to_excel(writer, index=False, sheet_name='Resultados')
                        excel_data = output.getvalue()
                        b64_xlsx = base64.b64encode(excel_data).decode()
                        href_xlsx = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64_xlsx}" download="correcao_manual.xlsx" style="background-color: #2196F3; color: white; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; border-radius: 5px;">üìä Baixar Excel</a>'
                        st.markdown(href_xlsx, unsafe_allow_html=True)
                else:
                    st.warning("Nenhum resultado foi calculado com sucesso.")
    else:
        st.info("‚ûï Adicione valores para corre√ß√£o usando o painel acima")

def render_cliente_info(processor: PDFProcessor):
    """Renderiza informa√ß√µes do cliente"""
    st.subheader("üë§ Informa√ß√µes do Cliente")
    col1, col2 = st.columns(2)
    with col1:
        st.text_input("C√≥digo", processor.cliente.codigo, disabled=True)
    with col2:
        st.text_input("Nome", processor.cliente.nome, disabled=True)

def render_venda_info(processor: PDFProcessor):
    """Renderiza informa√ß√µes da venda"""
    st.subheader("üí∞ Informa√ß√µes da Venda")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.text_input("N√∫mero", processor.venda.numero, disabled=True)
    with col2:
        st.text_input("Data", processor.venda.data, disabled=True)
    with col3:
        st.text_input("Valor", formatar_moeda(processor.venda.valor), disabled=True)

def render_pdf_analysis(processor: PDFProcessor, config: Dict):
    """Renderiza a an√°lise do PDF"""
    render_cliente_info(processor)
    render_venda_info(processor)
    
    st.divider()
    col1, col2 = st.columns(2)
    with col1:
        InfoBox(
            "Valor Original Total",
            formatar_moeda(processor.total_original),
            "blue"
        )
    with col2:
        InfoBox(
            "Valor Recebido Total",
            formatar_moeda(processor.total_recebido),
            "green" if processor.total_recebido > 0 else "yellow"
        )
    
    st.divider()
    if st.button("üéØ Calcular Corre√ß√£o Monet√°ria", type="primary", key="btn_calcular_correcao"):
        with st.spinner("Calculando corre√ß√£o monet√°ria..."):
            resultados = []
            detalhes_indices = []
            
            total_parcelas = len(processor.parcelas)
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, parcela in enumerate(processor.parcelas):
                progress = (i + 1) / total_parcelas
                progress_bar.progress(progress)
                status_text.text(f"Processando parcela {i+1} de {total_parcelas}...")
                
                valor_original = parcela.valor_original
                valor_pago = parcela.valor_pago
                data_vencimento = parse_date(parcela.data_vencimento)
                data_pagamento = parse_date(parcela.data_recebimento) if parcela.data_recebimento else None
                
                if not data_vencimento:
                    st.warning(f"Data de vencimento inv√°lida para parcela {parcela.codigo}")
                    continue
                
                try:
                    # Corre√ß√£o do valor original
                    if config["metodo_correcao"] == "√çndice √önico":
                        correcao_original = calcular_correcao_individual(
                            valor_original,
                            data_vencimento,
                            config["data_referencia"],
                            config["indices_para_calculo"][0]
                        )
                    else:
                        correcao_original = calcular_correcao_media(
                            valor_original,
                            data_vencimento,
                            config["data_referencia"],
                            config["indices_para_calculo"]
                        )
                    
                    # Corre√ß√£o do valor recebido (se houver data de pagamento)
                    correcao_recebido = None
                    if data_pagamento and valor_pago > 0:
                        if config["metodo_correcao"] == "√çndice √önico":
                            correcao_recebido = calcular_correcao_individual(
                                valor_pago,
                                data_pagamento,
                                config["data_referencia"],
                                config["indices_para_calculo"][0]
                            )
                        else:
                            correcao_recebido = calcular_correcao_media(
                                valor_pago,
                                data_pagamento,
                                config["data_referencia"],
                                config["indices_para_calculo"]
                            )
                    
                    # Adicionar ao dataframe de resultados
                    resultados.append({
                        'Parcela': parcela.codigo,
                        'Dt Vencim': parcela.data_vencimento,
                        'Dt Receb': parcela.data_recebimento if parcela.data_recebimento else "",
                        'Valor Original': valor_original,
                        'Valor Original Corrigido': correcao_original['valor_corrigido'] if correcao_original['sucesso'] else valor_original,
                        'Valor Pago': valor_pago,
                        'Valor Pago Corrigido': correcao_recebido['valor_corrigido'] if correcao_recebido and correcao_recebido['sucesso'] else valor_pago,
                        '√çndice(s)': ', '.join(config["indices_para_calculo"]) if config["metodo_correcao"] == "M√©dia de √çndices" else config["indices_para_calculo"][0],
                        'Fator Corre√ß√£o Original': correcao_original['fator_correcao'] if correcao_original['sucesso'] else 1.0,
                        'Fator Corre√ß√£o Recebido': correcao_recebido['fator_correcao'] if correcao_recebido and correcao_recebido['sucesso'] else 1.0,
                        'Varia√ß√£o (%) Original': correcao_original['variacao_percentual'] if correcao_original['sucesso'] else 0.0,
                        'Varia√ß√£o (%) Recebido': correcao_recebido['variacao_percentual'] if correcao_recebido and correcao_recebido['sucesso'] else 0.0,
                        'Status': '‚úÖ' if correcao_original['sucesso'] else '‚ùå'
                    })
                
                except Exception as e:
                    st.error(f"Erro ao corrigir parcela {parcela.codigo}: {str(e)}")
                    continue
            
            progress_bar.empty()
            status_text.empty()
            
            if resultados:
                df_resultados = pd.DataFrame(resultados)
                
                st.subheader("üìä Resultados da Corre√ß√£o Monet√°ria")
                st.dataframe(df_resultados.style.format({
                    'Valor Original': lambda x: formatar_moeda(x),
                    'Valor Original Corrigido': lambda x: formatar_moeda(x),
                    'Valor Pago': lambda x: formatar_moeda(x),
                    'Valor Pago Corrigido': lambda x: formatar_moeda(x),
                    'Fator Corre√ß√£o Original': "{:.6f}",
                    'Fator Corre√ß√£o Recebido': "{:.6f}",
                    'Varia√ß√£o (%) Original': "{:.2f}%",
                    'Varia√ß√£o (%) Recebido': "{:.2f}%"
                }), use_container_width=True)
                
                # Resumo estat√≠stico
                st.subheader("üìà Resumo Estat√≠stico")
                col1, col2, col3, col4 = st.columns(4)
                
                total_original = df_resultados['Valor Original'].sum()
                total_original_corrigido = df_resultados['Valor Original Corrigido'].sum()
                total_recebido = df_resultados['Valor Pago'].sum()
                total_recebido_corrigido = df_resultados['Valor Pago Corrigido'].sum()
                
                variacao_original = total_original_corrigido - total_original
                variacao_recebido = total_recebido_corrigido - total_recebido
                
                col1.metric("Total Original", formatar_moeda(total_original), formatar_moeda(variacao_original))
                col2.metric("Total Original Corrigido", formatar_moeda(total_original_corrigido))
                col3.metric("Total Recebido", formatar_moeda(total_recebido), formatar_moeda(variacao_recebido))
                col4.metric("Total Recebido Corrigido", formatar_moeda(total_recebido_corrigido))
                
                # Exportar resultados
                st.subheader("üíæ Exportar Resultados")
                col1, col2 = st.columns(2)

                with col1:
                    csv = df_resultados.to_csv(index=False, sep=';', decimal=',')
                    b64_csv = base64.b64encode(csv.encode()).decode()
                    href_csv = f'<a href="data:file/csv;base64,{b64_csv}" download="parcelas_corrigidas.csv" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; border-radius: 5px;">üì• Baixar CSV</a>'
                    st.markdown(href_csv, unsafe_allow_html=True)

                with col2:
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        df_resultados.to_excel(writer, index=False, sheet_name='Resultados')
                    excel_data = output.getvalue()
                    b64_xlsx = base64.b64encode(excel_data).decode()
                    href_xlsx = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64_xlsx}" download="parcelas_corrigidas.xlsx" style="background-color: #2196F3; color: white; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; border-radius: 5px;">üìä Baixar Excel</a>'
                    st.markdown(href_xlsx, unsafe_allow_html=True)

# ===== Aplica√ß√£o principal =====
def main():
    try:
        # Configura√ß√µes da barra lateral
        config = render_sidebar()
        
        if not config:
            st.warning("N√£o foi poss√≠vel carregar as configura√ß√µes. Tente novamente.")
            return
            
        if config["modo"] == "Corrigir Valor Manual":
            render_correcao_manual(config)
        else:
            uploaded_file = FileUploader()
            
            if uploaded_file is not None:
                processor = PDFProcessor()
                if processor.process_pdf(uploaded_file):
                    render_pdf_analysis(processor, config)
                else:
                    st.error("Falha ao processar o PDF. Verifique o formato do arquivo.")
            else:
                st.info("üì§ Fa√ßa upload de um arquivo PDF para come√ßar a an√°lise.")
    
    except requests.exceptions.RequestException as e:
        st.error(f"‚ùå Erro de conex√£o: {str(e)}")
        st.info("Verifique sua conex√£o com a internet e tente novamente.")
    except Exception as e:
        st.error(f"‚ùå Ocorreu um erro inesperado: {str(e)}")
        st.info("Se o problema persistir, entre em contato com o suporte t√©cnico.")

if __name__ == "__main__":
    main()
